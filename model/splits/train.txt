160	adjudicated	5	"def demo():<newline>    print(""To run the demo code for a module, type nltk.module.demo()"")"
302	adjudicated	4	def get_random_crop_coords(height: int, width: int, crop_height: int, crop_width: int, h_start: float, w_start: float):<newline>    # h_start is [0, 1) and should map to [0, (height - crop_height)]  (note inclusive)<newline>    # This is conceptually equivalent to mapping onto `range(0, (height - crop_height + 1))`<newline>    # See: https://github.com/albumentations-team/albumentations/pull/1080<newline>    y1 = int((height - crop_height + 1) * h_start)<newline>    y2 = y1 + crop_height<newline>    x1 = int((width - crop_width + 1) * w_start)<newline>    x2 = x1 + crop_width<newline>    return x1, y1, x2, y2
110	adjudicated	4	def __post_init__(self):<newline>    rng = np.random.default_rng(self.seed)<newline>    self._sampled_values = rng.integers(low=self.low, high=self.high, size=self.size).tolist()
93	adjudicated	4	class InstallState:<newline>    def __init__(self):<newline>        self.dev = False<newline>        self.pre = False<newline>        self.selective_upgrade = False<newline>        self.keep_outdated = False<newline>        self.skip_lock = False<newline>        self.ignore_pipfile = False<newline>        self.code = False<newline>        self.requirementstxt = None<newline>        self.deploy = False<newline>        self.packages = []<newline>        self.editables = []<newline>        self.extra_pip_args = []<newline>        self.categories = []
385	adjudicated	5	def _multiline_exception(text):<newline>    orig = text<newline>    text = text.strip()
321	adjudicated	4	"async def set_int(client, gather, data):<newline>    if gather:<newline>        for _ in range(count // 100):<newline>            await asyncio.gather(<newline>                *(<newline>                    asyncio.create_task(client.set(f""bench:int_{i}"", data))<newline>                    for i in range(100)<newline>                )<newline>            )<newline>    else:<newline>        for i in range(count):<newline>            await client.set(f""bench:int_{i}"", data)"
8	adjudicated	4	def jax_binary_op(state, **kwargs):<newline>  mkn = kwargs['mkn']<newline>  m = mkn[0]<newline>  k = mkn[1]<newline>  n = mkn[2]<newline>  dtype = kwargs['dtype']<newline>  op = kwargs['op']<newline>  a = np.random.random([m, k]).astype(dtype)<newline>  b = np.random.random([k, n]).astype(dtype)<newline>  f = op<newline>  f_jitted = jax.jit(f)<newline>  f_jitted(a, b).block_until_ready()<newline>  while state:<newline>    f_jitted(a, b).block_until_ready()<newline>  state.counters['items_per_second'] = Counter(<newline>      state.iterations, Counter.kIsRate<newline>  )
86	adjudicated	4	def pytest_configure(config):<newline>    mypy_source_root = os.path.dirname(os.path.abspath(__file__))<newline>    if os.getcwd() != mypy_source_root:<newline>        os.chdir(mypy_source_root)
428	adjudicated	4	"def pgcli_line_magic(line):<newline>    _logger.debug(""pgcli magic called: %r"", line)<newline>    parsed = sql.parse.parse(line, {})<newline>    # ""get"" was renamed to ""set"" in ipython-sql:<newline>    # https://github.com/catherinedevlin/ipython-sql/commit/f4283c65aaf68f961e84019e8b939e4a3c501d43<newline>    if hasattr(sql.connection.Connection, ""get""):<newline>        conn = sql.connection.Connection.get(parsed[""connection""])<newline>    else:<newline>        try:<newline>            conn = sql.connection.Connection.set(parsed[""connection""])<newline>        # a new positional argument was added to Connection.set in version 0.4.0 of ipython-sql<newline>        except TypeError:<newline>            conn = sql.connection.Connection.set(parsed[""connection""], False)"
352	adjudicated	5	"def request(method, url, **kwargs):<newline>    """"""Constructs and sends a :class:`Request <Request>`.<newline>    """""""
146	adjudicated	4	"class FindZone(Zone):<newline>    def addTags(self, m):<newline>        color = next(self.colorCycle)<newline>        self.txt.tag_add(color, ""1.0+%sc"" % m.start(), ""1.0+%sc"" % m.end())<newline>        try:<newline>            self.txt.tag_add(<newline>                ""emph"" + color, ""1.0+%sc"" % m.start(""emph""), ""1.0+%sc"" % m.end(""emph"")<newline>            )<newline>        except:<newline>            pass"
339	adjudicated	4	"def wrapper(*args, **kwargs):<newline>    start = time.monotonic()<newline>    ret = func(*args, **kwargs)<newline>    duration = time.monotonic() - start<newline>    if ""num"" in kwargs:<newline>        count = kwargs[""num""]<newline>    else:<newline>        count = args[1]<newline>    print(f""{func.__name__} - {count} Requests"")<newline>    print(f""Duration  = {duration}"")<newline>    print(f""Rate = {count/duration}"")<newline>    print()<newline>    return ret"
327	adjudicated	5	def run(self, **kwargs):<newline>    pass
58	adjudicated	5	"class CSVClassificationCorpus(Corpus):<newline>    """"""<newline>    Classification corpus instantiated from CSV data files.<newline>    """""""
60	adjudicated	3	"def main():<newline>    print(""#### Versions:"")<newline>    print(f""##### Flair\n{flair.__version__}"")<newline>    print(f""##### Pytorch\n{torch.__version__}"")<newline>    print(f""##### Transformers\n{transformers.__version__}"")<newline>    print(f""#### GPU\n{torch.cuda.is_available()}"")"
271	adjudicated	5	"class ChallengeResponse(jose.TypedJSONObjectWithFields):<newline>    # _fields_to_partial_json<newline>    """"""ACME challenge response.""""""<newline>    TYPES: Dict[str, Type['ChallengeResponse']] = {}"
349	adjudicated	5	def __iter__(self):<newline>    for line in open('https://radimrehurek.com/mycorpus.txt'):<newline>        # assume there's one document per line, tokens separated by whitespace<newline>        yield dictionary.doc2bow(line.lower().split())
225	adjudicated	5	"class ContextMenu:<newline>    """"""A class that implements a context menu application command.<newline>    """""""
361	adjudicated	5	"class HTTPDigestAuth(AuthBase):<newline>    """"""Attaches HTTP Digest Authentication to the given Request object."""""""
85	adjudicated	4	"def main() -> None:<newline>    parser = argparse.ArgumentParser()<newline>    parser.add_argument(<newline>        ""--to-sqlite"",<newline>        action=""store_true"",<newline>        default=False,<newline>        help=""Convert to a sqlite cache (default: convert from)"",<newline>    )<newline>    parser.add_argument(<newline>        ""--output_dir"",<newline>        action=""store"",<newline>        default=None,<newline>        help=""Output cache location (default: same as input)"",<newline>    )<newline>    parser.add_argument(""input_dir"", help=""Input directory for the cache"")<newline>    args = parser.parse_args()"
236	adjudicated	4	def close_api_gracefully(apis):<newline>    try:<newline>        for api in apis.values():<newline>            process = api['process']<newline>            childs = get_child_pids(process.pid)<newline>            for p in childs:<newline>                try:<newline>                    os.kill(p, signal.SIGTERM)<newline>                except Exception:<newline>                    p.kill()<newline>            sys.stdout.flush()<newline>            process.terminate()<newline>            process.join()<newline>            sys.stdout.flush()<newline>    except KeyboardInterrupt:<newline>        sys.exit(0)<newline>    except psutil.NoSuchProcess:<newline>        pass
197	adjudicated	4	def getChild(self, request, name):<newline>    return self
183	adjudicated	5	def get_setting_target(node):<newline>    # target nodes are placed next to the node in the doc tree<newline>    return node.parent[node.parent.index(node) + 1]
222	adjudicated	4	def show_version() -> None:<newline>    entries = []
135	adjudicated	3	"def _init_bindings(self, top):<newline>    top.bind(""<Control-n>"", self._devset_next)<newline>    top.bind(""<Control-p>"", self._devset_prev)<newline>    top.bind(""<Control-t>"", self.toggle_show_trace)<newline>    top.bind(""<KeyPress>"", self.update)<newline>    top.bind(""<Control-s>"", lambda e: self.save_grammar())<newline>    top.bind(""<Control-o>"", lambda e: self.load_grammar())<newline>    self.grammarbox.bind(""<Control-t>"", self.toggle_show_trace)<newline>    self.grammarbox.bind(""<Control-n>"", self._devset_next)<newline>    self.grammarbox.bind(""<Control-p>"", self._devset_prev)"
155	adjudicated	4	"class ChartMatrixView:<newline>    """"""<newline>    A view of a chart that displays the contents of the corresponding matrix.<newline>    """""""
266	adjudicated	4	def __init__(self, *shape):<newline>  self.shape = shape<newline>  self.dtype = np.float16<newline>  self.sz = int(np.prod(shape))<newline>  assert(self.sz <= 0x4000)<newline>  self.tt = libane.ANE_TensorCreate(self.sz, 1)<newline>  assert(self.tt is not None)
37	adjudicated	4	"def preprocess(image):<newline>    w, h = image.size<newline>    w, h = map(lambda x: x - x % 32, (w, h))  # resize to integer multiple of 32<newline>    image = image.resize((w, h), resample=PIL_INTERPOLATION[""lanczos""])<newline>    image = np.array(image).astype(np.float32) / 255.0<newline>    image = image[None].transpose(0, 3, 1, 2)<newline>    image = torch.from_numpy(image)<newline>    return 2.0 * image - 1.0"
468	adjudicated	4	class TrainBenchmarkRunner(BenchmarkRunner):
408	adjudicated	5	"class CheckList(Subcommand):  # type: ignore<newline>    def add_subparser(self, parser: argparse._SubParsersAction) -> argparse.ArgumentParser:<newline>        description = """"""Dummy command because checklist is not installed.""""""<newline>        subparser = parser.add_parser(<newline>            self.name,<newline>            description=description,<newline>            help=""Run a trained model through a checklist suite."",<newline>        )<newline>        subparser.set_defaults(func=_dummy_output)<newline>        return subparser"
298	adjudicated	5	"class ClientNetwork:<newline>    """"""Wrapper around requests that signs POSTs for authentication.<newline>    """""""
112	adjudicated	4	def __len__(self):<newline>    return self.size
205	adjudicated	4	"def test_text_normalizer():<newline>    std = EnglishTextNormalizer()<newline>    assert std(""Let's"") == ""let us""<newline>    assert std(""he's like"") == ""he is like""<newline>    assert std(""she's been like"") == ""she has been like""<newline>    assert std(""10km"") == ""10 km""<newline>    assert std(""10mm"") == ""10 mm""<newline>    assert std(""RC232"") == ""rc 232"""
312	adjudicated	4	class Command:<newline>    def __init__(self, argv: Optional[str] = None) -> None:<newline>        self.argv = argv or sys.argv[:]<newline>        self.prog_name = Path(self.argv[0]).name
376	adjudicated	5	"def _(event):<newline>    """"""Toggle between Vi and Emacs mode.""""""<newline>    _logger.debug('Detected F4 key.')<newline>    if mycli.key_bindings == ""vi"":<newline>        event.app.editing_mode = EditingMode.EMACS<newline>        mycli.key_bindings = ""emacs""<newline>    else:<newline>        event.app.editing_mode = EditingMode.VI<newline>        mycli.key_bindings = ""vi"""
481	adjudicated	4	"def pytest_runtest_setup(item):<newline>    if ""slow"" in item.keywords and not item.config.getoption(""--runslow""):<newline>        pytest.skip(""need --runslow option to run"")"
421	adjudicated	4	def ensure_dir_exists(path):<newline>    parent_dir = expanduser(dirname(path))<newline>    os.makedirs(parent_dir, exist_ok=True)
7	adjudicated	4	def jax_unary(state, **kwargs):<newline>  shape = kwargs['shape']<newline>  dtype = kwargs['dtype']<newline>  op = kwargs['op']<newline>  input0 = np.random.random(shape).astype(dtype)<newline>  f = op<newline>  f_jitted = jax.jit(f)<newline>  f_jitted(input0).block_until_ready()<newline>  while state:<newline>    f_jitted(input0).block_until_ready()<newline>  state.counters['items_per_second'] = Counter(<newline>      input0.size * state.iterations, Counter.kIsRate<newline>  )
246	adjudicated	4	def build_binaries() -> Iterator[Tuple[str, Path]]:<newline>    for target_script, extra_args in TARGET_SCRIPTS.items():<newline>        subprocess.check_call(<newline>            [<newline>                'pyinstaller',<newline>                '--onefile',<newline>                '--noupx',<newline>                '-p',<newline>                HTTPIE_DIR,<newline>                '--additional-hooks-dir',<newline>                HOOKS_DIR,<newline>                *extra_args,<newline>                target_script,<newline>            ]<newline>        )
389	adjudicated	4	"class CountInstances(Subcommand):<newline>    def add_subparser(self, parser: argparse._SubParsersAction) -> argparse.ArgumentParser:<newline>        description = """"""Count the number of training instances in an experiment config file.""""""<newline>        subparser = parser.add_parser(self.name, description=description, help=description)<newline>        subparser.add_argument(""param_path"", type=str, help=""path to an experiment config file"")"
364	adjudicated	5	"def check_compatibility(urllib3_version, chardet_version, charset_normalizer_version):<newline>    urllib3_version = urllib3_version.split(""."")<newline>    assert urllib3_version != [""dev""]  # Verify urllib3 isn't installed from git."
288	adjudicated	5	"class IdentifierType(_Constant):<newline>    """"""ACME identifier type.""""""<newline>    POSSIBLE_NAMES: Dict[str, _Constant] = {}"
152	adjudicated	4	class LoadCorpus(threading.Thread):<newline>    def __init__(self, name, model):<newline>        threading.Thread.__init__(self)<newline>        self.model, self.name = model, name
213	adjudicated	5	"def available_models() -> List[str]:<newline>    """"""Returns the names of available models""""""<newline>    return list(_MODELS.keys())"
96	adjudicated	5	"def install(state, **kwargs):<newline>    """"""Installs provided packages and adds them to Pipfile, or (if no packages are given), installs all packages from Pipfile.""""""<newline>    from pipenv.routines.install import do_install<newline>    "
355	adjudicated	5	"def head(url, **kwargs):<newline>    r""""""Sends a HEAD request.<newline>    """""""
383	adjudicated	4	def cli_is_multiline(mycli):<newline>    @Condition<newline>    def cond():<newline>        doc = get_app().layout.get_buffer_by_name(DEFAULT_BUFFER).document
9	adjudicated	4	def get_regions():<newline>    return requests.post(_API_URL, json={'name':'list_regions'},<newline>                         auth=_API_AUTH, timeout=_REQUEST_TIMEOUT_SECONDS).json()['regions']
489	adjudicated	4	def keepdims_wrapped_callable(x, axis=None, keepdims=None, *args, **kwargs):<newline>    r = a_callable(x, *args, axis=axis, **kwargs)
422	adjudicated	4	def write_default_config(source, destination, overwrite=False):<newline>    destination = expanduser(destination)<newline>    if not overwrite and exists(destination):<newline>        return
3	adjudicated	5	"def _export_results(data_header, data, export_dir, name):<newline>  assert ""mean"" in data_header # For future comparisons via _get_baseline_means<newline>  export_dir = os.path.expanduser(export_dir)<newline>  os.makedirs(export_dir, exist_ok=True)<newline>  filename = os.path.join(export_dir, name + "".csv"")<newline>  with open(filename, ""w"", newline="""") as csvfile:<newline>    writer = csv.writer(csvfile)<newline>    writer.writerow(data_header)<newline>    writer.writerows(data)<newline>  return filename"
98	adjudicated	5	"def uninstall(ctx, state, all_dev=False, all=False, **kwargs):<newline>    """"""Uninstalls a provided package and removes it from Pipfile.""""""<newline>    from pipenv.routines.uninstall import do_uninstall"
286	adjudicated	5	"class UnexpectedUpdate(ClientError):<newline>    """"""Unexpected update error."""""""
219	adjudicated	4	class _Overwrites:<newline>    __slots__ = ('id', 'allow', 'deny', 'type')
324	adjudicated	4	def __init__(self):<newline>    self._client = None
495	adjudicated	5	"class VersioneerConfig:<newline>    """"""Container for Versioneer configuration parameters."""""""
191	adjudicated	4	"def _py_files(folder):<newline>    return (str(p) for p in Path(folder).rglob(""*.py""))"
308	adjudicated	4	"class MotionBlur(Blur):<newline>    """"""Apply motion blur to the input image using a random-sized kernel.<newline>    """""""
301	adjudicated	4	"def query_registration(self, regr: messages.RegistrationResource<newline>                       ) -> messages.RegistrationResource:<newline>    """"""Query server about registration."""""""
402	adjudicated	4	"def add_argument(self, *args, **kwargs):<newline>    # Add default value to the help message when the default is meaningful.<newline>    default = kwargs.get(""default"")<newline>    if kwargs.get(<newline>        ""action""<newline>    ) not in self._action_defaults_to_ignore and not self._is_empty_default(default):<newline>        description = kwargs.get(""help"", """")<newline>        kwargs[""help""] = f""{description} (default = {default})""<newline>    super().add_argument(*args, **kwargs)"
292	adjudicated	4	"class Header(jose.Header):<newline>    """"""ACME-specific JOSE Header. Implements nonce, kid, and url.<newline>    """"""<newline>    nonce: Optional[bytes] = jose.field('nonce', omitempty=True, encoder=jose.encode_b64jose)<newline>    kid: Optional[str] = jose.field('kid', omitempty=True)<newline>    url: Optional[str] = jose.field('url', omitempty=True)"
83	adjudicated	4	async def plain_coroutine() -> int:<newline>    return 1
300	adjudicated	5	"def new_account(self, new_account: messages.NewRegistration) -> messages.RegistrationResource:<newline>    """"""Register."""""""
295	adjudicated	4	"def nonce(value: str) -> bytes:  # type: ignore[misc]  # pylint: disable=no-self-argument,missing-function-docstring<newline>    try:<newline>        return jose.decode_b64jose(value)<newline>    except jose.DeserializationError as error:<newline>        # TODO: custom error<newline>        raise jose.DeserializationError(""Invalid nonce: {0}"".format(error))"
379	adjudicated	5	"def read_config_file(f, list_values=True):<newline>    """"""Read a config file.<newline>    """""""
113	adjudicated	4	"def format_json_to_md(input_json_file, output_md_file):<newline>    with open(input_json_file, encoding=""utf-8"") as f:<newline>        results = json.load(f)"
252	adjudicated	3	"def merge_all_the_people(release: str, contributors: People, committers: FullNames, reporters: GitHubLogins) -> None:<newline>    """"""<newline>    >>> contributors = {'Alice': new_person(github='alice', twitter='alice')}<newline>    >>> merge_all_the_people('2.6.0', contributors, {}, {})<newline>    >>> contributors<newline>    {'Alice': {'committed': [], 'reported': [], 'github': 'alice', 'twitter': 'alice'}}<newline>    """""""
88	adjudicated	4	"def parse_commit_title(diff: str) -> str:<newline>    m = re.search(""\n    ([^ ].*)"", diff)<newline>    assert m is not None, ""Could not parse diff""<newline>    return m.group(1)"
413	adjudicated	4	"def _(event):<newline>    """"""Enable/Disable Multiline Mode.""""""<newline>    _logger.debug(""Detected F3 key."")<newline>    pgcli.multi_line = not pgcli.multi_line"
94	adjudicated	4	class LockOptions:<newline>    def __init__(self):<newline>        self.dev_only = False
452	adjudicated	4	def bench_task_decorator(benchmark: BenchmarkFixture):<newline>    benchmark(task, noop_function)
99	adjudicated	5	"def lock(ctx, state, **kwargs):<newline>    """"""Generates Pipfile.lock.""""""<newline>    from pipenv.routines.lock import do_lock<newline>    from pipenv.utils.project import ensure_project"
139	adjudicated	5	"def _init_fonts(self, root):<newline>    # See: <http://www.astro.washington.edu/owen/ROTKFolklore.html><newline>    self._sysfont = Font(font=Button()[""font""])<newline>    root.option_add(""*Font"", self._sysfont)"
391	adjudicated	4	class CheckList(Subcommand):<newline>    def add_subparser(self, parser: argparse._SubParsersAction) -> argparse.ArgumentParser:
499	adjudicated	5	"def register_vcs_handler(vcs, method):  # decorator<newline>    """"""Decorator to mark a method as the handler for a particular VCS."""""""
193	adjudicated	4	"def pytest_addoption(parser):<newline>    parser.addoption(<newline>        ""--reactor"",<newline>        default=""default"",<newline>        choices=[""default"", ""asyncio""],<newline>    )"
150	adjudicated	4	"class CollocationsView:<newline>    _BACKGROUND_COLOUR = ""#FFF""  # white"
230	adjudicated	4	"class Spotify:<newline>    """"""Represents a Spotify listening activity from Discord. This is a special case of<newline>    :class:`Activity` that makes it easier to work with the Spotify integration.<newline>    """""""
400	adjudicated	4	"class ArgumentParserWithDefaults(argparse.ArgumentParser):<newline>    """"""<newline>    Custom argument parser that will display the default value for an argument<newline>    in the help message.<newline>    """""""
293	adjudicated	4	"class Signature(jose.Signature):<newline>    """"""ACME-specific Signature. Uses ACME-specific Header for customer fields.""""""<newline>    __slots__ = jose.Signature._orig_slots  # type: ignore[attr-defined]  # pylint: disable=protected-access,no-member"
34	adjudicated	5	def get_timesteps(self, num_inference_steps, strength, device):<newline>    # get the original timestep using init_timestep<newline>    init_timestep = min(int(num_inference_steps * strength), num_inference_steps)
369	adjudicated	4	def is_refreshing(self):<newline>    return self._completer_thread and self._completer_thread.is_alive()
177	adjudicated	5	"def main(<newline>    template,<newline>    extra_context,<newline>    no_input,<newline>    checkout,<newline>    verbose,<newline>    replay,<newline>    overwrite_if_exists,<newline>    output_dir,<newline>    config_file,<newline>    default_config,<newline>    debug_file,<newline>    directory,<newline>    skip_if_file_exists,<newline>    accept_hooks,<newline>    replay_file,<newline>    list_installed,<newline>    keep_project_on_failure,<newline>):<newline>    """"""Create a project from a Cookiecutter project template (TEMPLATE)."
237	adjudicated	4	async def wait_api_start(api_name, pid, port):<newline>    timeout = 60<newline>    start_time = time.time()<newline>    started = is_pid_listen_port(pid, port)<newline>    while (time.time() - start_time) < timeout and started is False:<newline>        await asyncio.sleep(0.5)<newline>        started = is_pid_listen_port(pid, port)<newline>    return api_name, port, started
204	adjudicated	4	def test_spelling_normalizer():<newline>    std = EnglishSpellingNormalizer()
105	adjudicated	4	def filter(dataset: datasets.Dataset, **kwargs):<newline>    _ = dataset.filter(**kwargs
214	adjudicated	5	"def load_model(<newline>    name: str,<newline>    device: Optional[Union[str, torch.device]] = None,<newline>    download_root: str = None,<newline>    in_memory: bool = False,<newline>) -> Whisper:<newline>    """"""<newline>    Load a Whisper ASR model"
442	adjudicated	5	"def job_name(self):<newline>    return self.name if ""examples"" in self.name else f""tests_{self.name}"""
334	adjudicated	4	"async def run(client):<newline>    data_str = ""a"" * size<newline>    data_int = int(""1"" * size)"
46	adjudicated	4	def check_size(image, height, width):<newline>    if isinstance(image, PIL.Image.Image):<newline>        w, h = image.size<newline>    elif isinstance(image, torch.Tensor):<newline>        *_, h, w = image.shape
320	adjudicated	4	"async def set_str(client, gather, data):<newline>    if gather:<newline>        for _ in range(count // 100):<newline>            await asyncio.gather(<newline>                *(<newline>                    asyncio.create_task(client.set(f""bench:str_{i}"", data))<newline>                    for i in range(100)<newline>                )<newline>            )<newline>    else:<newline>        for i in range(count):<newline>            await client.set(f""bench:str_{i}"", data)"
416	adjudicated	5	"def keyring_initialize(keyring_enabled, *, logger):<newline>    """"""Initialize keyring only if explicitly enabled""""""<newline>    global keyring<newline>    """""""
466	adjudicated	4	class BenchmarkRunner:<newline>    def __init__(<newline>            self,<newline>            model_name,<newline>            detail=False,<newline>            device='cuda',<newline>            torchscript=False,<newline>            torchcompile=None,<newline>            aot_autograd=False,<newline>            precision='float32',<newline>            fuser='',<newline>            num_warm_iter=10,<newline>            num_bench_iter=50,<newline>            use_train_size=False,<newline>            **kwargs<newline>    ):<newline>        self.model_name = model_name<newline>        self.detail = detail<newline>        self.device = device<newline>        self.amp_dtype, self.model_dtype, self.data_dtype = resolve_precision(precision)<newline>        self.channels_last = kwargs.pop('channels_last', False)<newline>        if self.amp_dtype is not None:<newline>            self.amp_autocast = partial(torch.cuda.amp.autocast, dtype=self.amp_dtype)<newline>        else:<newline>            self.amp_autocast = suppress
216	adjudicated	4	"class Snowflake(Protocol):<newline>    """"""An ABC that details the common operations on a Discord model.<newline>    """""""
239	adjudicated	4	"def index():<newline>    return ""MindsDB Hanler Discovery"", 200"
423	adjudicated	4	def upgrade_config(config, def_config):<newline>    cfg = load_config(config, def_config)<newline>    cfg.write()
377	adjudicated	5	"def _(event):<newline>    """"""Force autocompletion at cursor.""""""<newline>    _logger.debug('Detected <Tab> key.')<newline>    b = event.app.current_buffer<newline>    if b.complete_state:<newline>        b.complete_next()<newline>    else:<newline>        b.start_completion(select_first=True)"
272	adjudicated	5	"class UnrecognizedChallenge(Challenge):<newline>    """"""Unrecognized challenge."""""""
378	adjudicated	5	"def log(logger, level, message):<newline>    """"""Logs message to stderr if logging isn't initialized."""""""
84	adjudicated	4	"def decorated_generator() -> Generator[str, None, int]:<newline>    yield ""a""<newline>    return 1"
