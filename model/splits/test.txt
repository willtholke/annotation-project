157	adjudicated	5	"class ChartView:<newline>    """"""<newline>    A component for viewing charts.  This is used by ``ChartParserApp`` to<newline>    allow students to interactively experiment with various chart<newline>    parsing techniques.  It is also used by ``Chart.draw()``.<newline>    """""""
196	adjudicated	4	def _reset_stats(self):<newline>    self.tail.clear()<newline>    self.start = self.lastmark = self.lasttime = time()
473	adjudicated	4	def write_results(results_file, results):<newline>    with open(results_file, mode='w') as cf:<newline>        dw = csv.DictWriter(cf, fieldnames=results[0].keys())<newline>        dw.writeheader()<newline>        for r in results:<newline>            dw.writerow(r)<newline>        cf.flush()
380	adjudicated	5	"def get_included_configs(config_file: Union[str, TextIOWrapper]) -> list:<newline>    """"""Get a list of configuration files that are included into config_path<newline>    with !includedir directive.<newline>    """""""
79	adjudicated	4	def extract(chunks: Iterable[JsonDict]) -> Iterable[JsonDict]:<newline>    for chunk in chunks:<newline>        if isinstance(chunk, dict):<newline>            yield chunk<newline>            yield from extract(chunk.values())<newline>        elif isinstance(chunk, list):<newline>            yield from extract(chunk)
424	adjudicated	4	class ExplainOutputFormatter:<newline>    def __init__(self, max_width):<newline>        self.max_width = max_width
309	adjudicated	4	"class MedianBlur(Blur):<newline>    """"""Blur the input image using a median filter with a random aperture linear size.<newline>    """""""
20	adjudicated	4	"def is_windows():<newline>  return sys.platform.startswith(""win32"")"
467	adjudicated	4	class InferenceBenchmarkRunner(BenchmarkRunner):
444	adjudicated	4	"def hello(name: str = ""world""):<newline>    prefect.get_run_logger().info(f""Hello {name}!"")"
358	adjudicated	5	"class AuthBase:<newline>    """"""Base class that all auth implementations derive from"""""""
192	adjudicated	5	"def chdir(tmpdir):<newline>    """"""Change to pytest-provided temporary directory""""""<newline>    tmpdir.chdir()"
70	adjudicated	4	"class Label:<newline>    """"""<newline>    This class represents a label. Each label has a value and optionally a confidence score. The<newline>    score needs to be between 0.0 and 1.0. Default value for the score is 1.0.<newline>    """""""
120	adjudicated	4	def wrapper(*args, **kwargs):<newline>    starttime = timeit.default_timer()<newline>    _ = func(*args, **kwargs)<newline>    delta = timeit.default_timer() - starttime<newline>    return delta
107	adjudicated	4	"def tokenize(examples):<newline>    return tokenizer(examples[""text""])"
494	adjudicated	4	def main():<newline>    run_cli()
311	adjudicated	4	"class GlassBlur(Blur):<newline>    """"""Apply glass noise to the input image."""""""
461	adjudicated	5	def bench_flow_with_submitted_tasks(benchmark: BenchmarkFixture, num_tasks: int):<newline>    test_task = task(noop_function)
357	adjudicated	5	"class FlaskyStyle(Style):<newline>    background_color = ""#f8f8f8""<newline>    default_style = """""
475	adjudicated	5	def main():<newline>    args = parser.parse_args()<newline>    # by default use the EMA weights (if present)<newline>    args.use_ema = not args.no_use_ema<newline>    # by default sort by checkpoint metric (if present) and avg top n checkpoints<newline>    args.sort = not args.no_sort
299	adjudicated	4	"def __init__(self, directory: messages.Directory, net: 'ClientNetwork') -> None:<newline>    """"""Initialize."""""""
210	adjudicated	4	def test_tokenizer():<newline>    gpt2_tokenizer = get_tokenizer(multilingual=False)<newline>    multilingual_tokenizer = get_tokenizer(multilingual=True)
407	adjudicated	5	"def _cached_path(args: argparse.Namespace):<newline>    logger.info(""Cache directory: %s"", args.cache_dir)<newline>    if args.inspect:<newline>        if args.extract_archive or args.force_extract or args.remove:<newline>            raise RuntimeError(<newline>                ""cached-path cannot accept --extract-archive, --force-extract, or --remove ""<newline>                ""options when --inspect flag is used.""<newline>            )<newline>        inspect_cache(patterns=args.resources, cache_dir=args.cache_dir)<newline>    elif args.remove:<newline>        from allennlp.common.util import format_size"
255	adjudicated	4	def save_doc_file(content: str) -> None:<newline>    current_doc = load_doc_file()<newline>    marker_start = current_doc.find(MARKER_START) + len(MARKER_START)<newline>    assert marker_start > 0, 'cannot find the start marker'<newline>    marker_end = current_doc.find(MARKER_END, marker_start)<newline>    assert marker_start < marker_end, f'{marker_end=} < {marker_start=}'<newline>    updated_doc = (<newline>        current_doc[:marker_start]<newline>        + '\n\n'<newline>        + content<newline>        + '\n\n'<newline>        + current_doc[marker_end:]<newline>    )<newline>    if current_doc != updated_doc:<newline>        DOC_FILE.write_text(updated_doc, encoding='utf-8')
158	adjudicated	5	"def _fake_PIPE(*args, **kwargs):<newline>    raise NotImplementedError(""subprocess.PIPE is not supported."")"
161	adjudicated	4	"def make_parser():<newline>    parser = argparse.ArgumentParser()<newline>    parser.add_argument(<newline>        ""--deprecation"",<newline>        choices=[""all"", ""pending"", ""imminent"", ""none""],<newline>        default=""imminent"",<newline>    )<newline>    parser.add_argument(""--postgres"", action=""store_true"")<newline>    parser.add_argument(""--elasticsearch5"", action=""store_true"")<newline>    parser.add_argument(""--elasticsearch6"", action=""store_true"")<newline>    parser.add_argument(""--elasticsearch7"", action=""store_true"")<newline>    parser.add_argument(""--emailuser"", action=""store_true"")<newline>    parser.add_argument(""--disabletimezone"", action=""store_true"")<newline>    parser.add_argument(""--bench"", action=""store_true"")<newline>    return parser"
366	adjudicated	4	class CompletionRefresher(object):
387	adjudicated	5	def get_toolbar_tokens():<newline>    result = []<newline>    result.append(('class:bottom-toolbar', ' '))
462	adjudicated	4	def convert(mxnet_name, torch_name):<newline>    # download and load the pre-trained model<newline>    net = gluoncv.model_zoo.get_model(mxnet_name, pretrained=True)
447	adjudicated	4	async def read_flow_run(flow_run_id):<newline>    async with prefect.get_client() as client:<newline>        return await client.read_flow_run(flow_run_id)
64	adjudicated	2	"class ModelArguments:<newline>    model_name_or_path: str = field(<newline>        metadata={""help"": ""The model checkpoint for weights initialization.""},<newline>    )<newline>    layers: str = field(default=""-1"", metadata={""help"": ""Layers to be fine-tuned.""})<newline>    subtoken_pooling: str = field(<newline>        default=""first"",<newline>        metadata={""help"": ""Subtoken pooling strategy used for fine-tuned.""},<newline>    )<newline>    hidden_size: int = field(default=256, metadata={""help"": ""Hidden size for NER model.""})<newline>    use_crf: bool = field(default=False, metadata={""help"": ""Whether to use a CRF on-top or not.""})"
492	adjudicated	5	"def topk(a, k, axis, keepdims):<newline>    """"""Chunk and combine function of topk<newline>    """""""
337	adjudicated	4	def run():<newline>    args = parse_args()<newline>    r = redis.Redis()<newline>    r.flushall()<newline>    set_str(conn=r, num=args.n, pipeline_size=args.P, data_size=args.s)<newline>    set_int(conn=r, num=args.n, pipeline_size=args.P, data_size=args.s)<newline>    get_str(conn=r, num=args.n, pipeline_size=args.P, data_size=args.s)<newline>    get_int(conn=r, num=args.n, pipeline_size=args.P, data_size=args.s)<newline>    incr(conn=r, num=args.n, pipeline_size=args.P, data_size=args.s)<newline>    lpush(conn=r, num=args.n, pipeline_size=args.P, data_size=args.s)<newline>    lrange_300(conn=r, num=args.n, pipeline_size=args.P, data_size=args.s)<newline>    lpop(conn=r, num=args.n, pipeline_size=args.P, data_size=args.s)<newline>    hmset(conn=r, num=args.n, pipeline_size=args.P, data_size=args.s)
208	adjudicated	4	def random():<newline>    rand.seed(42)<newline>    numpy.random.seed(42)
182	adjudicated	5	"def is_setting_index(node):<newline>    if node.tagname == ""index"" and node[""entries""]:<newline>        # index entries for setting directives look like:<newline>        # [('pair', 'SETTING_NAME; setting', 'std:setting-SETTING_NAME', '')]<newline>        entry_type, info, refid = node[""entries""][0][:3]<newline>        return entry_type == ""pair"" and info.endswith(""; setting"")<newline>    return False"
217	adjudicated	3	"class User(Snowflake, Protocol):<newline>    """"""An ABC that details the common operations on a Discord user.<newline>    """""""
454	adjudicated	4	def benchmark_flow():<newline>    benchmark(noop_task)
394	adjudicated	4	"def _get_task_suite(args: argparse.Namespace) -> TaskSuite:<newline>    available_tasks = TaskSuite.list_available()<newline>    if args.task in available_tasks:<newline>        suite_name = args.task<newline>    else:<newline>        raise ConfigurationError(<newline>            f""'{args.task}' is not a recognized task suite. ""<newline>            f""Available tasks are: {available_tasks}.""<newline>        )"
42	adjudicated	3	"def enable_vae_slicing(self):<newline>    r""""""<newline>    Enable sliced VAE decoding.<newline>    """""""
263	adjudicated	4	class ANETensor:<newline>  def __init__(self, *shape):<newline>    self.shape = shape<newline>    self.dtype = np.float16<newline>    self.sz = int(np.prod(shape))<newline>    assert(self.sz <= 0x4000)<newline>    self.tt = libane.ANE_TensorCreate(self.sz, 1)<newline>    assert(self.tt is not None)
253	adjudicated	4	def hook(hook_api):<newline>    for pkg in [<newline>        'pip',<newline>        'setuptools',<newline>        'distutils',<newline>        'pkg_resources'<newline>    ]:<newline>        datas, binaries, hiddenimports = collect_all(pkg)<newline>        hook_api.add_datas(datas)<newline>        hook_api.add_binaries(binaries)<newline>        hook_api.add_imports(*hiddenimports)
228	adjudicated	4	"class Game(BaseActivity):<newline>    """"""A slimmed down version of :class:`Activity` that represents a Discord game.<newline>    """""""
116	adjudicated	4	def read_formatted(dataset: datasets.Dataset, length, type):<newline>    with dataset.formatted_as(type=type):<newline>        for i in range(length):<newline>            _ = dataset[i]
247	adjudicated	4	def build_packages(http_binary: Path, httpie_binary: Path) -> None:<newline>    import httpie
256	adjudicated	4	def build_docs_structure(database: Database):<newline>    tools = database[KEY_TOOLS]<newline>    assert len(tools) == len({tool['title'] for tool in tools.values()}), 'tool titles need to be unique'<newline>    tree = database[KEY_DOC_STRUCTURE]<newline>    structure = []<newline>    for platform, tools_ids in tree.items():<newline>        assert platform.isalnum(), f'{platform=} must be alphanumeric for generated links to work'<newline>        platform_tools = [tools[tool_id] for tool_id in tools_ids]<newline>        structure.append((platform, platform_tools))<newline>    return structure<newline>
420	adjudicated	4	"def load_config(usr_cfg, def_cfg=None):<newline>    # avoid config merges when possible. For writing, we need an umerged config instance.<newline>    # see https://github.com/dbcli/pgcli/issues/1240 and https://github.com/DiffSK/configobj/issues/171<newline>    if def_cfg:<newline>        cfg = ConfigObj()<newline>        cfg.merge(ConfigObj(def_cfg, interpolation=False))<newline>        cfg.merge(ConfigObj(expanduser(usr_cfg), interpolation=False, encoding=""utf-8""))<newline>    else:<newline>        cfg = ConfigObj(expanduser(usr_cfg), interpolation=False, encoding=""utf-8"")<newline>    cfg.filename = expanduser(usr_cfg)<newline>    return cfg"
72	adjudicated	4	"def setup(app: Sphinx) -> None:<newline>    app.add_object_type(<newline>        ""confval"",<newline>        ""confval"",<newline>        objname=""configuration value"",<newline>        indextemplate=""pair: %s; configuration value"",<newline>        doc_field_types=[<newline>            Field(""type"", label=""Type"", has_arg=False, names=(""type"",)),<newline>            Field(""default"", label=""Default"", has_arg=False, names=(""default"",)),<newline>        ],<newline>    )"
129	adjudicated	3	"def sort(dataset: datasets.Dataset):<newline>    _ = dataset.sort(""numbers"")"
338	adjudicated	4	"def timer(func):<newline>    @wraps(func)<newline>    def wrapper(*args, **kwargs):<newline>        start = time.monotonic()<newline>        ret = func(*args, **kwargs)<newline>        duration = time.monotonic() - start<newline>        if ""num"" in kwargs:<newline>            count = kwargs[""num""]<newline>        else:<newline>            count = args[1]<newline>        print(f""{func.__name__} - {count} Requests"")<newline>        print(f""Duration  = {duration}"")<newline>        print(f""Rate = {count/duration}"")<newline>        print()<newline>        return ret"
212	adjudicated	4	def _download(url: str, root: str, in_memory: bool) -> Union[bytes, str]:<newline>    os.makedirs(root, exist_ok=True)
53	adjudicated	4	def set_seed(seed: int):<newline>    hf_set_seed(seed)
371	adjudicated	5	"class OutputStyle(PygmentsStyle):<newline>    default_style = """"<newline>    styles = style"
307	adjudicated	5	"class Blur(ImageOnlyTransform):<newline>    """"""Blur the input image using a random-sized kernel.<newline>    """""""
430	adjudicated	4	def __init__(self):<newline>    self._completer_thread = None<newline>    self._restart_refresh = threading.Event()
51	adjudicated	4	"def ddim_bit_scheduler_step(<newline>    self,<newline>    model_output: torch.FloatTensor,<newline>    timestep: int,<newline>    sample: torch.FloatTensor,<newline>    eta: float = 0.0,<newline>    use_clipped_model_output: bool = True,<newline>    generator=None,<newline>    return_dict: bool = True,<newline>) -> Union[DDIMSchedulerOutput, Tuple]:<newline>    """"""<newline>    Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion<newline>    process from the learned model outputs (most often the predicted noise).<newline>    Args:<newline>        model_output (`torch.FloatTensor`): direct output from learned diffusion model.<newline>        timestep (`int`): current discrete timestep in the diffusion chain.<newline>        sample (`torch.FloatTensor`):<newline>            current instance of sample being created by diffusion process.<newline>        eta (`float`): weight of noise for added noise in diffusion step.<newline>        use_clipped_model_output (`bool`): TODO<newline>        generator: random number generator.<newline>        return_dict (`bool`): option for returning tuple rather than DDIMSchedulerOutput class<newline>    Returns:<newline>        [`~schedulers.scheduling_utils.DDIMSchedulerOutput`] or `tuple`:<newline>        [`~schedulers.scheduling_utils.DDIMSchedulerOutput`] if `return_dict` is True, otherwise a `tuple`. When<newline>        returning a tuple, the first element is the sample tensor.<newline>    """"""<newline>    if self.num_inference_steps is None:<newline>        raise ValueError(<newline>            ""Number of inference steps is 'None', you need to run 'set_timesteps' after creating the scheduler""<newline>        )"
264	adjudicated	4	class ANE:<newline>  def __init__(self):<newline>    init_libane()<newline>    libane.ANE_Open()
393	adjudicated	5	def _get_predictor(args: argparse.Namespace) -> Predictor:<newline>    check_for_gpu(args.cuda_device)<newline>    archive = load_archive(<newline>        args.archive_file,<newline>        cuda_device=args.cuda_device,<newline>    )
5	adjudicated	3	def math_benchmark(*args):<newline>  def decorator(func):<newline>    for test_case in args[0]:
314	adjudicated	4	def print_doc(<newline>    provider_or_field: Optional[str] = None,<newline>    args: Optional[List[T]] = None,<newline>    lang: str = DEFAULT_LOCALE,<newline>    output: Optional[Union[TextIO, TextIOWrapper]] = None,<newline>    seed: Optional[float] = None,<newline>    includes: Optional[List[str]] = None,<newline>) -> None:<newline>    if args is None:<newline>        args = []<newline>    if output is None:<newline>        output = sys.stdout<newline>    fake = Faker(locale=lang, includes=includes)<newline>    fake.seed_instance(seed)
80	adjudicated	4	class It(Iterator[str]):<newline>    stop = False
181	adjudicated	4	"class SettingsListDirective(Directive):<newline>    def run(self):<newline>        return [settingslist_node("""")]"
374	adjudicated	5	"def _(event):<newline>    """"""Enable/Disable SmartCompletion Mode.""""""<newline>    _logger.debug('Detected F2 key.')<newline>    mycli.completer.smart_completion = not mycli.completer.smart_completion"
21	adjudicated	4	"def shell(cmd):<newline>  try:<newline>    output = subprocess.check_output(cmd)<newline>  except subprocess.CalledProcessError as e:<newline>    print(e.output)<newline>    raise<newline>  return output.decode(""UTF-8"").strip()"
404	adjudicated	4	"def add_subcommands():<newline>    for subcommand_name in sorted(Subcommand.list_available()):<newline>        if subcommand_name in subcommands:<newline>            continue<newline>        subcommands.add(subcommand_name)<newline>        subcommand_class = Subcommand.by_name(subcommand_name)<newline>        subcommand = subcommand_class()<newline>        subparser = subcommand.add_subparser(subparsers)<newline>        if subcommand_class.requires_plugins:<newline>            subparser.add_argument(<newline>                ""--include-package"",<newline>                type=str,<newline>                action=""append"",<newline>                default=[],<newline>                    help=""additional packages to include"",<newline>        )"
226	adjudicated	4	"class BaseActivity:<newline>    """"""The base activity that all user-settable activities inherit from.<newline>    A user-settable activity is one that can be used in :meth:`Client.change_presence`.<newline>    """""""
23	adjudicated	4	"def get_python_version(python_bin_path):<newline>  version_output = shell(<newline>    [python_bin_path, ""-c"",<newline>     (""import sys; print(\""{}.{}\"".format(sys.version_info[0], ""<newline>      ""sys.version_info[1]))"")])<newline>  major, minor = map(int, version_output.split("".""))<newline>  return major, minor"
133	adjudicated	3	"class RegexpChunkApp:<newline>    """"""<newline>    A graphical tool for exploring the regular expression based chunk<newline>    parser ``nltk.chunk.RegexpChunkParser``.<newline>    """""""
187	adjudicated	4	"class QPSSpider(Spider):<newline>    name = ""qps""<newline>    benchurl = ""http://localhost:8880/"""
417	adjudicated	5	"def keyring_get_password(key):<newline>    """"""Attempt to get password from keyring""""""<newline>    # Find password from store<newline>    passwd = """"<newline>    try:<newline>        passwd = keyring.get_password(""pgcli"", key) or """"<newline>    except Exception as e:<newline>        click.secho(<newline>            keyring_error_message.format(<newline>                ""Load your password from keyring returned:"", str(e)<newline>            ),<newline>            err=True,<newline>            fg=""red"",<newline>        )<newline>    return passwd"
291	adjudicated	4	"class Status(_Constant):<newline>    """"""ACME ""status"" field.""""""<newline>    POSSIBLE_NAMES: Dict[str, _Constant] = {}"
25	adjudicated	4	def get_benchmark_fn(nargs, nshards):<newline>  pmap_fn = pmap(lambda *args: jnp.sum(jnp.array(args)))<newline>  shape = (nshards, 4)<newline>  args = [np.random.random(shape) for _ in range(nargs)]<newline>  sharded_args = pmap(lambda x: x)(args)<newline>  assert all(isinstance(arg, jax.Array) for arg in sharded_args)<newline>  def benchmark_fn():<newline>    for _ in range(100):<newline>      pmap_fn(*sharded_args)<newline>  return benchmark_fn
211	adjudicated	4	def test_split_on_unicode():<newline>    multilingual_tokenizer = get_tokenizer(multilingual=True)
49	adjudicated	4	"def decimal_to_bits(x, bits=BITS):<newline>    """"""expects image tensor ranging from 0 to 1, outputs bit tensor ranging from -1 to 1""""""<newline>    device = x.device"
142	adjudicated	4	class ConcordanceSearchModel:<newline>    def __init__(self, queue):<newline>        self.queue = queue<newline>        self.CORPORA = _CORPORA<newline>        self.DEFAULT_CORPUS = _DEFAULT<newline>        self.selected_corpus = None<newline>        self.reset_query()<newline>        self.reset_results()<newline>        self.result_count = None<newline>        self.last_sent_searched = 0
234	adjudicated	5	"def get_retry_after(self, current: Optional[float] = None) -> float:<newline>    """"""Returns the time in seconds until the cooldown will be reset.<newline>    """""""
167	adjudicated	4	def get_language_name(locale_string):<newline>    try:<newline>        return LANGUAGE_OVERRIDES[locale_string]<newline>    except KeyError:<newline>        return Locale.parse(locale_string).english_name
362	adjudicated	5	"def to_native_string(string, encoding=""ascii""):<newline>    """"""Given a string object, regardless of type, returns a representation of<newline>    that string in the native string type, encoding and decoding where<newline>    necessary. This assumes ASCII unless told otherwise.<newline>    """"""<newline>    if isinstance(string, builtin_str):<newline>        out = string<newline>    else:<newline>        out = string.decode(encoding)"
306	adjudicated	5	"def crop_keypoint_by_coords(<newline>    keypoint: KeypointInternalType, crop_coords: Tuple[int, int, int, int]<newline>):  # skipcq: PYL-W0613<newline>    """"""Crop a keypoint using the provided coordinates of bottom-left and top-right corners in pixels and the<newline>    required height and width of the crop."
45	adjudicated	4	"def prepare_mask_and_masked_image(image, mask):<newline>    image = np.array(image.convert(""RGB""))<newline>    image = image[None].transpose(0, 3, 1, 2)<newline>    image = torch.from_numpy(image).to(dtype=torch.float32) / 127.5 - 1.0"
458	adjudicated	4	async def anoop_function():<newline>    pass
47	adjudicated	4	"def overlay_inner_image(image, inner_image, paste_offset: Tuple[int] = (0, 0)):<newline>    inner_image = inner_image.convert(""RGBA"")<newline>    image = image.convert(""RGB"")"
493	adjudicated	5	"def blockwise(<newline>    func,<newline>    out_ind,<newline>    *args,<newline>    name=None,<newline>    token=None,<newline>    dtype=None,<newline>    adjust_chunks=None,<newline>    new_axes=None,<newline>    align_arrays=True,<newline>    concatenate=None,<newline>    meta=None,<newline>    **kwargs,<newline>):<newline>    """"""Tensor operation: Generalized inner and outer products<newline>        >>> def sequence_dot(a_blocks, b_blocks):<newline>    ...     result = 0<newline>    ...     for a, b in zip(a_blocks, b_blocks):<newline>    ...         result += a.dot(b)<newline>    ...     return result<newline>    >>> def f(a):<newline>    ...     return a[:, None] * np.ones((1, 5))<newline>    >>> def double(x):<newline>    ...     return np.concatenate([x, x])<newline>    """"""<newline><newline>"
151	adjudicated	4	class CollocationsModel:<newline>    def __init__(self, queue):<newline>        self.result_count = None<newline>        self.selected_corpus = None<newline>        self.collocations = None<newline>        self.CORPORA = _CORPORA<newline>        self.DEFAULT_CORPUS = _DEFAULT<newline>        self.queue = queue<newline>        self.reset_results()
144	adjudicated	4	class SearchCorpus(threading.Thread):<newline>    def __init__(self, model, page, count):<newline>        self.model, self.count, self.page = model, count, page<newline>        threading.Thread.__init__(self)
147	adjudicated	4	"class ReplaceZone(Zone):<newline>    def addTags(self, m):<newline>        s = sz.rex.sub(self.repl, m.group())<newline>        self.txt.delete(<newline>            ""1.0+%sc"" % (m.start() + self.diff), ""1.0+%sc"" % (m.end() + self.diff)<newline>        )<newline>        self.txt.insert(""1.0+%sc"" % (m.start() + self.diff), s, next(self.colorCycle))<newline>        self.diff += len(s) - (m.end() - m.start())"
143	adjudicated	4	class LoadCorpus(threading.Thread):<newline>    def __init__(self, name, model):<newline>        threading.Thread.__init__(self)<newline>        self.model, self.name = model, name
360	adjudicated	5	"class HTTPProxyAuth(HTTPBasicAuth):<newline>    """"""Attaches HTTP Proxy Authentication to a given Request object."""""""
200	adjudicated	4	def test_dtw_cuda_equivalence(N: int, M: int):<newline>    x_numpy = np.random.randn(N, M).astype(np.float32)<newline>    x_cuda = torch.from_numpy(x_numpy).cuda()
368	adjudicated	4	"def refresh(self, executor, callbacks, completer_options=None):<newline>    """"""Creates a SQLCompleter object and populates it with the relevant<newline>    completion suggestions in a background thread.<newline>    """""""
396	adjudicated	5	"def add_subparser(self, parser: argparse._SubParsersAction) -> argparse.ArgumentParser:<newline>    description = """"""Build a vocabulary from an experiment config file.""""""<newline>    subparser = parser.add_parser(self.name, description=description, help=description)"
106	adjudicated	4	"def benchmark_map_filter():<newline>    times = {""num examples"": SPEED_TEST_N_EXAMPLES}<newline>    with tempfile.TemporaryDirectory() as tmp_dir:<newline>        features = datasets.Features({""text"": datasets.Value(""string""), ""numbers"": datasets.Value(""float32"")})<newline>        dataset = generate_example_dataset(<newline>            os.path.join(tmp_dir, ""dataset.arrow""), features, num_examples=SPEED_TEST_N_EXAMPLES<newline>        )"
17	adjudicated	4	class AnEnum(enum.IntEnum):<newline>  A = 123<newline>  B = 456
443	adjudicated	4	"def create_circleci_config(folder=None):<newline>    if folder is None:<newline>        folder = os.getcwd()<newline>    # Used in CircleCIJob.to_dict() to expand the test list (for using parallelism)<newline>    os.environ[""test_preparation_dir""] = folder<newline>    jobs = []<newline>    all_test_file = os.path.join(folder, ""test_list.txt"")<newline>    if os.path.exists(all_test_file):<newline>        with open(all_test_file) as f:<newline>            all_test_list = f.read()<newline>    else:<newline>        all_test_list = []<newline>    if len(all_test_list) > 0:<newline>        jobs.extend(PIPELINE_TESTS)"
251	adjudicated	4	def find_reporters(since: str, until: str) -> GitHubLogins:<newline>    url = f'{API_URL}/search/issues'<newline>    page = 1<newline>    per_page = 100<newline>    params = {<newline>        'q': f'repo:{REPO}/{OWNER} is:issue closed:{since}..{until}',<newline>        'per_page': per_page,<newline>    }<newline>    reporters: GitHubLogins = set()
453	adjudicated	4	def bench_task_call(benchmark: BenchmarkFixture):<newline>    noop_task = task(noop_function)
436	adjudicated	4	def pytest_addoption(parser):<newline>    from transformers.testing_utils import pytest_addoption_shared
373	adjudicated	5	"def mycli_bindings(mycli):<newline>    """"""Custom key bindings for mycli.""""""<newline>    kb = KeyBindings()"
6	adjudicated	4	def wrapper(state, test_case=test_case):<newline>  return func(state, **test_case)
136	adjudicated	3	"def _init_fonts(self, top):<newline>    # TWhat's our font size (default=same as sysfont)<newline>    self._size = IntVar(top)<newline>    self._size.set(20)<newline>    self._font = Font(family=""helvetica"", size=-self._size.get())<newline>    self._smallfont = Font(<newline>        family=""helvetica"", size=-(int(self._size.get() * 14 // 20))<newline>    )"
141	adjudicated	4	"class ConcordanceSearchView:<newline>    _BACKGROUND_COLOUR = ""#FFF""  # white"
